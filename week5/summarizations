from pathlib import Path
import csv

csv_path = Path('/Users/sanyuktasingh/Desktop/data class/FPC Trees by Mature Height.csv')

genus_by_height_dict = {} #Our goal is a dictionary where {Genus : List of Heights for the Genus}

with open (csv_path, 'r', encoding='cp1252') as csv_file:
    reader = csv.reader(csv_file)
    tree_headers = next(reader)

    for row in reader:
        genus, species, height_ft = row #Each height is assigned to the genus it shares a row with
        #This is shorthand for:
        #genus = row[0]
        # species = row[1]
        # height_ft = row[2]
        #we do this because it unpacks the string into vairables which makes it easier to work with in the later code rather than always having to index it 
        if genus not in genus_by_height_dict: #checking to see if the genus is in the dict
            genus_by_height_dict[genus] = [int(height_ft)] #If the Genus is not a key in the dict, we can create a new key-value pair where the value is a list containing the first height; first time we see 'Acer' it goes into if and next time it goes into else; this code runs only the first time we see the genus; it sets the value to the list containing the height; we used = cause we're creating the key for the first time
        else:
            genus_by_height_dict[genus].append(int(height_ft)) #This runs every other time we see the same genus again; we append the new height; we use append because the genus is already in the dict so we don't want to overwrite the list, we want to add the new height to the list

print(genus_by_height_dict['Acer'])

#Count of the number of species per genus; means the number of species for each genus = the number of heights recorded for that genus = the length of the list

count_species_per_genus = {}
for genus in genus_by_height_dict:
    count_species_per_genus[genus] = len(genus_by_height_dict[genus]) #we dont use count because count doesn’t give you the total number of items — only the number of times a certain item occurs; count needs a value to search for

print(count_species_per_genus)

#the above code can be written in one line using dict comprehension

count_species_per_genus = {genus:len(genus_by_height_dict[genus]) for genus in genus_by_height_dict}
print(count_species_per_genus) 

#count of the average height per genus; for this create a new dictionary where {Genus : Mean of Heights}
import statistics

mean_height_per_genus = {genus:statistics.mean(genus_by_height_dict[genus]) for genus in genus_by_height_dict}

print(mean_height_per_genus)

#EXPORTING SUMMARY TABLES 
#By storing summaries as a list of lists, we can then export those summaries to csvs for visualization in Excel; We can iterate the dictionary containing {Genus : List of Heights} to calculate our summarizations, and then immediately store them in a list of lists

summary_table_headers = ['Genus', 'Species Count', 'Min Height (ft)', 'Max Height (ft)', 'Mean Height (ft)']
summary_table = []

#We can iterate across the dictionary to get each genus and their corresponding list of heights

for genus in genus_by_height_dict:
    heights_list = genus_by_height_dict[genus] #to get each genus and the corresponding list of heights 

    species_count = len(heights_list) #calculate the metrics for the heights
    min_height_ft = min(heights_list)
    max_height_ft = max(heights_list)
    mean_height_ft = statistics.mean(heights_list)

    summary_table.append([genus, species_count, min_height_ft, max_height_ft, mean_height_ft]) #store the metrics in a list of lists table

with open(Path('/Users/sanyuktasingh/Desktop/data class/FPC Trees by Mature Height.csv'), 'w', encoding='cp1252') as f:
    writer = csv.writer(f)
    writer.writerows([summary_table_headers]+summary_table) 