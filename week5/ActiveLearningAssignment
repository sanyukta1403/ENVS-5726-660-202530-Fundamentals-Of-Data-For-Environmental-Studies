#TASK 1

from pathlib import Path
import json
import csv

json_path = Path('/Users/sanyuktasingh/Desktop/data class/Cocoa Supply Chain Data.json')

with open(json_path) as f:
    data = json.load(f) #read a JSON file into a Python data structure

cocoa__trade_headers = ['trader_group', 'country_of_destination', 'cocoa_deforestation_15_years_total_exposure', 'cocoa_net_emissions_15_years_total'] #creating a list of the headers we want in the csv
cocoa_trade_table = [] #this will hold the csv rows 

for record in data["cote_divoire_cocoa_v1_1_1"]["data"]: #this iterates over very record in JSON, data is the outermost, cote.. returns the inner dictionary under that top-level key, "data" inside that returns the list of record objects; have to do this cause thr JSON is nested
    supply = record["supply_chain_data"] #supply now points to the supply_chain_data dict (contains trader_group, country_of_destination, etc.)
    cocoa = record["cocoa_data"] #cocoa now points to the cocoa_data dict (contains cocoa_deforestation_15_years_total_exposure, etc.)
    cocoa_trade_values = [ #builds a single row with the 4 values I want in the same order as headers 
        record["supply_chain_data"]['trader_group'], #goes into the nested supply_chain_data dict and grabs the trader_group value
        record['supply_chain_data']['country_of_destination'],
        record['cocoa_data']['cocoa_deforestation_15_years_total_exposure'],
        record['cocoa_data']['cocoa_net_emissions_15_years_total']
    ]
    cocoa_trade_table.append(cocoa_trade_values)

output_path = Path('/Users/sanyuktasingh/Desktop/data class/Cocoa Supply Chain Data.csv')
with open(output_path, 'w', newline="", encoding='cp1252') as f:
    writer = csv.writer(f)
    writer.writerows([cocoa__trade_headers]+cocoa_trade_table)

#TASK 2

csv_path = Path('/Users/sanyuktasingh/Desktop/data class/Cocoa Supply Chain Data.csv')

trader_group_dict = {}
country_of_destination_dict = {}

with open(csv_path, 'r', encoding='cp1252') as csv_file:
    reader = csv.reader(csv_file)
    headers = next(reader)

    for row in reader:
        trader_group, country_of_destination, cocoa_deforestation_15_years_total_exposure, cocoa_net_emissions_15_years_total = row #Unpack row directly into variables (must match CSV column order)

        cocoa_deforestation = float(cocoa_deforestation_15_years_total_exposure) #Convert numeric values to float
        cocoa_net_emissions = float(cocoa_net_emissions_15_years_total)

        if trader_group not in trader_group_dict:
            trader_group_dict[trader_group] = {
                'cocoa_deforestation_15_years_total_exposure' : [cocoa_deforestation], #: means maps to 
                'cocoa_net_emissions_15_years_total' : [cocoa_net_emissions]
            } #using a nested dictionary dict[key] = {subkey1: value1, subkey2: value2}
        else:
            trader_group_dict[trader_group]['cocoa_deforestation_15_years_total_exposure'].append(cocoa_deforestation)
            trader_group_dict[trader_group]['cocoa_net_emissions_15_years_total'].append(cocoa_net_emissions)

        if country_of_destination not in country_of_destination_dict:
            country_of_destination_dict[country_of_destination] = {
                'cocoa_deforestation_15_years_total_exposure' : [cocoa_deforestation],
                'cocoa_net_emissions_15_years_total' : [cocoa_net_emissions]
            }
        else:
            country_of_destination_dict[country_of_destination]['cocoa_deforestation_15_years_total_exposure'].append(cocoa_deforestation)
            country_of_destination_dict[country_of_destination]['cocoa_net_emissions_15_years_total'].append(cocoa_net_emissions)

with open('/Users/sanyuktasingh/Desktop/data class/Trader_Group_Summary.json', 'w', encoding='cp1252') as json_file:
    json.dump(trader_group_dict, json_file, sort_keys=True)

with open('/Users/sanyuktasingh/Desktop/data class/Country_of_Destination_Summary.json', 'w', encoding='cp1252') as json_file:
    json.dump(country_of_destination_dict, json_file, sort_keys=True)

#TASK 3 

trader_group_deforestation_summary = {} #summarize trader_group by cocoa deforestation
for trader_group in trader_group_dict:
    total = sum(trader_group_dict[trader_group]['cocoa_deforestation_15_years_total_exposure']) #get the list of deforestation values for this trader and add them up and save in variable called total
    trader_group_deforestation_summary[trader_group] = total # Store in a new dictionary: {Trader : SUM}; this holds only total for each trader

max_deforestation = max(trader_group_deforestation_summary.values()) #.values() gives all the values in the dictionary without the keys; find the largest total deforestation so we can apply the 10% filter later
trader_group_deforestation_table = [["trader_group", "SUM_cocoa_deforestation"]] #after calculating stats we should store them in a table (list of lists) so we can export to a CSV

for trader_group in trader_group_deforestation_summary:
    if trader_group_deforestation_summary[trader_group] > 0.1 * max_deforestation:
        trader_group_deforestation_table.append([trader_group, trader_group_deforestation_summary[trader_group]]) #if above ans yes then we add a row [trader_group, total] to the table

with open('/Users/sanyuktasingh/Desktop/data class/Trader_Group_SUM_deforestation.csv', 'w', encoding='cp1252') as f:
    writer = csv.writer(f)
    writer.writerows(trader_group_deforestation_table)


trader_group_emissions_summary = {} #summarize trader_group by net emissions
for trader_group in trader_group_dict:
    total = sum(trader_group_dict[trader_group]['cocoa_net_emissions_15_years_total']) 
    trader_group_emissions_summary[trader_group] = total

max_emissions = max(trader_group_emissions_summary.values())
trader_group_emissions_table = [['trader_group', 'SUM_cocoa_emissions']]

for trader_group in trader_group_emissions_summary:
    if trader_group_emissions_summary[trader_group] > 0.1 * max_emissions:
        trader_group_emissions_table.append([trader_group,trader_group_emissions_summary[trader_group]])

with open('/Users/sanyuktasingh/Desktop/data class/Trader_Group_SUM_emissions.csv', 'w', encoding='cp1252') as f:
    writer = csv.writer(f)
    writer.writerows(trader_group_emissions_table)


country_of_destination_summary = {} #summarize country by deforestation
for country_of_destination in country_of_destination_dict:
    total = sum(country_of_destination_dict[country_of_destination]['cocoa_deforestation_15_years_total_exposure'])
    country_of_destination_summary[country_of_destination] = total

max_country_deforestation = max(country_of_destination_summary.values())
country_of_destination_table = [['country_of_destination', 'SUM_deforestation']]

for country_of_destination in country_of_destination_summary:
    if country_of_destination_summary[country_of_destination] > 0.1 * max_country_deforestation:
        country_of_destination_table.append([country_of_destination, country_of_destination_summary[country_of_destination]])

with open('/Users/sanyuktasingh/Desktop/data class/Country_SUM_deforestation.csv', 'w', encoding='cp1252') as f:
    writer = csv.writer(f)
    writer.writerows(country_of_destination_table)


country_of_destination_emissions_summary = {} #summarize country by net emissions
for country_of_destination in country_of_destination_summary:
    total = sum(country_of_destination_dict[country_of_destination]['cocoa_net_emissions_15_years_total'])
    country_of_destination_emissions_summary[country_of_destination] = total

max_country_emissions = max(country_of_destination_emissions_summary.values())
country_emissions_table = [['country_of_destination', 'SUM_emissions']]

for country in country_of_destination_emissions_summary:
    if country_of_destination_emissions_summary[country] > 0.1 * max_country_emissions:
        country_emissions_table.append([country, country_of_destination_emissions_summary[country]])

with open('/Users/sanyuktasingh/Desktop/data class/Country_SUM_emissions.csv', 'w', encoding='cp1252') as f:
    writer = csv.writer(f)
    writer.writerows(country_emissions_table)