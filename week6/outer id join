# one-to-one join will only take one value per ID from the Join table. If there are duplicate IDs in the Join table, only the value from the last row with that ID is taken
# one-to-many join is an outer join where we reproduce duplicates from the Join table into the Target table

target_headers = ['COUNTYFIPS', 'POPULATION']
target_table = [
    [1, 1033797],
    [39, 83927],
    [43, 286115],
]

join_headers = ['COUNTYFIPS', 'TRACT', 'RISK_RATING']
join_table = [
    [1, 30101, 'Very Low'],
    [1, 30104, 'Relatively Low'],  #countyfips not unique in this table
    [39, 111300, 'Relatively Moderate'],
    [39, 111600, 'Relatively High'],
    [43, 21100, 'Very High'],
]

join_id_name = 'COUNTYFIPS'

#follow the same steps as inner join for one-to-one join 

one_to_one_join_dict = {}
for row in join_table:
    join_id = row[join_headers.index(join_id_name)]
    one_to_one_join_dict[join_id] = row 

both_headers = target_headers + join_headers

one_to_one_joined_table = []
for target_row in target_table:
    join_id = target_row[target_headers.index(join_id_name)]
    if join_id in one_to_one_join_dict:
        join_row = one_to_one_join_dict[join_id]
        one_to_one_joined_table.append(target_row+join_row)

from pprint import pprint
pprint(one_to_one_join_dict, width=60)

print(both_headers)
for row in one_to_one_joined_table:
    print(row)

#A One-to-One Join only stores one Join Row per ID. Because we have multiple Join Rows per ID, the Join Row that gets stored is only the last Join Row

#ONE TO MANY JOIN - list of every join row that matches join id 

one_to_many_join_dict = {}
for row in join_table:
    join_id = row[join_headers.index(join_id_name)]

    if join_id not in one_to_many_join_dict:
        one_to_many_join_dict[join_id] = [row] 
    else:
        one_to_many_join_dict[join_id].append(row)

pprint(one_to_many_join_dict, width=50)

both_headers = target_headers + join_headers
one_to_many_joined_table = []
for target_row in target_table:
    join_id = target_row[target_headers.index(join_id_name)]

    if join_id in one_to_many_join_dict:
        for join_row in one_to_many_join_dict[join_id]:
            one_to_many_joined_table.append(target_row+join_row) #For each Join Row, concatenate it with the Target Row and add it to the final Joined Table
print(both_headers)
for row in one_to_many_joined_table:
    print(row)